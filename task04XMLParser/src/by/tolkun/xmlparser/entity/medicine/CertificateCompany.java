//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB)
// Reference Implementation, v2.2.8-b130911.1802
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source
// schema.
// Generated on: 2019.04.02 at 08:11:49 PM MSK
//


package by.tolkun.xmlparser.entity.medicine;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import java.util.Objects;


/**
 * <p>Java class for CertificateCompany complex type.
 *
 * <p>The following schema fragment specifies the expected content contained
 * within this class.
 *
 * <pre>
 * &lt;complexType name="CertificateCompany">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.tolkun.by/xmlparser}Company">
 *       &lt;sequence>
 *         &lt;element name="certificate"
 *         type="{http://www.tolkun.by/xmlparser}Certificate"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 *
 * @author Kirill Tolkun
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CertificateCompany", propOrder = {
        "certificate"
})
public class CertificateCompany
        extends Company {

    /**
     * Logger of class {@code CertificateCompany}.
     */
    private static final Logger LOGGER
            = LogManager.getLogger(CertificateCompany.class);
    /**
     * Certificate of {@code CertificateCompany}.
     */
    @XmlElement(required = true)
    private Certificate certificate;

    /**
     * Default constructor.
     */
    public CertificateCompany() {
        LOGGER.debug("CertificateCompany created.");
    }

    /**
     * Gets the value of the certificate property.
     *
     * @return possible object is
     * {@link Certificate }
     */
    public Certificate getCertificate() {
        return certificate;
    }

    /**
     * Sets the value of the certificate property.
     *
     * @param value allowed object is
     *              {@link Certificate }
     */
    public void setCertificate(final Certificate value) {
        this.certificate = value;
    }

    /**
     * Compares this object to the specified object. The result is
     * {@code true} if the argument is not
     * {@code null} and is an {@code CertificateCompany} object that
     * contains the same field values.
     *
     * @param o the object to compare with.
     * @return {@code true} if the objects are the same;
     * {@code false} otherwise.
     */
    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        if (!super.equals(o)) {
            return false;
        }
        CertificateCompany that = (CertificateCompany) o;
        return Objects.equals(certificate, that.certificate);
    }

    /**
     * Returns a hash code for a {@code CertificateCompany}.
     *
     * @return a hash code value for a {@code CertificateCompany}.
     */
    @Override
    public int hashCode() {
        return Objects.hash(super.hashCode(), certificate);
    }

    /**
     * Returns a {@code String} object representing this
     * {@code CertificateCompany}.
     *
     * @return a string representation of the information of this
     * object
     */
    @Override
    public String toString() {
        return "CertificateCompany{"
                + "certificate=" + certificate
                + "} " + super.toString();
    }
}
